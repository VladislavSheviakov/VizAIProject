import logging
import base64
import os
import json
from datetime import datetime
from enum import Enum, auto
import re
import random
import shutil

import openai
from dotenv import load_dotenv

from telegram import Update
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler,
    MessageHandler, ContextTypes, ConversationHandler, filters
)

# === üîë –ó–∞–≥—Ä—É–∂–∞–µ–º .env ===
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
openai.api_key = OPENAI_API_KEY

# === –°–æ—Å—Ç–æ—è–Ω–∏—è FSM —á–µ—Ä–µ–∑ Enum ===


class States(Enum):
    WAIT_RENDER_IMAGE = auto()
    WAIT_FEEDBACK = auto()
    WAIT_PAYMENT = auto()
    WAIT_EMAIL = auto()

# === –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç ===


class ChatGPTTelegramBot:
    def log_generation(self, user_id: int):
        """
        –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ logs/prompts_log.jsonl
        """
        log_path = os.path.join(self.logs_dir, "prompts_log.jsonl")
        record = {
            "timestamp": datetime.utcnow().isoformat() + "Z",
            "user_id": user_id
        }
        with open(log_path, "a", encoding="utf-8") as f:
            f.write(json.dumps(record) + "\n")
    """
    Telegram-–±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é GPT-4o –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥.
    """

    def __init__(self, token: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤.
        :param token: –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
        """
        self.token = token

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.app: Application = ApplicationBuilder().token(self.token).build()

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if not os.path.exists("app.log"):
            open("app.log", "w").close()
        logging.basicConfig(
            level=logging.INFO,
            format="%(asctime)s - %(levelname)s - %(message)s",
            handlers=[
                logging.FileHandler("app.log", encoding="utf-8"),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)

        self.input_dir = "input_images"
        self.output_dir = "output_images"
        self.logs_dir = "logs"
        os.makedirs(self.input_dir, exist_ok=True)
        os.makedirs(self.output_dir, exist_ok=True)
        os.makedirs(self.logs_dir, exist_ok=True)

        # === FSM: ConversationHandler –¥–ª—è /render ===
        conv_handler_render = ConversationHandler(
            entry_points=[CommandHandler("render", self.render)],
            states={
                States.WAIT_RENDER_IMAGE: [
                    MessageHandler(
                        filters.PHOTO & filters.Caption(), self.handle_image)
                ],
                States.WAIT_FEEDBACK: [
                    MessageHandler(filters.TEXT & ~
                                   filters.COMMAND, self.handle_feedback)
                ],
            },
            fallbacks=[CommandHandler("cancel", self.cancel)],
        )

        # === FSM: ConversationHandler –¥–ª—è /buy ===
        conv_handler_buy = ConversationHandler(
            entry_points=[CommandHandler("buy", self.buy)],
            states={
                States.WAIT_PAYMENT: [
                    MessageHandler(filters.TEXT & ~
                                   filters.COMMAND, self.handle_payment)
                ],
                States.WAIT_EMAIL: [
                    MessageHandler(filters.TEXT & ~
                                   filters.COMMAND, self.handle_email)
                ],
            },
            fallbacks=[CommandHandler("cancel", self.cancel)],
        )

        # === –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã ===
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CommandHandler("help", self.help))
        self.app.add_handler(CommandHandler("stats", self.stats))
        self.app.add_handler(conv_handler_render)
        self.app.add_handler(conv_handler_buy)

    # === /start ===
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ä–µ–Ω–¥–µ—Ä-–±–æ—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π /render, /buy, /stats –∏–ª–∏ /help")

    # === /help ===
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
            "/render ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞\n"
            "/buy ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å –æ–ø–ª–∞—Ç—É\n"
            "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"
            "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å"
        )

    # === /stats ===
    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        count = 0
        if os.path.exists("prompts_log.jsonl"):
            with open("prompts_log.jsonl", "r", encoding="utf-8") as f:
                count = sum(1 for _ in f)
        await update.message.reply_text(f"üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–º—Ç–æ–≤: {count}")
        log_path = os.path.join(self.logs_dir, "prompts_log.jsonl")
        count = 0
        if os.path.exists(log_path):
            with open(log_path, "r", encoding="utf-8") as f:
                count = sum(1 for _ in f)
        await update.message.reply_text(f"–í—Å–µ–≥–æ —É—Å–ø–µ—à–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {count}")

    # === /cancel ===
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    # === /buy ===
    async def buy(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("üí≥ –ù–∞–ø–∏—à–∏ '–û–ø–ª–∞—Ç–∏–ª', –∫–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—à—å –æ–ø–ª–∞—Ç—É.")
        return States.WAIT_PAYMENT

    async def handle_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("üìß –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Å–≤–æ–π email.")
        return States.WAIT_EMAIL

    async def handle_email(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        email = update.message.text
        if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
            await update.message.reply_text("‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return States.WAIT_EMAIL
        self.logger.info(f"Email –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {email}")
        await update.message.reply_text(f"‚úÖ Email '{email}' –ø–æ–ª—É—á–µ–Ω. –°–ø–∞—Å–∏–±–æ!")
        return ConversationHandler.END

    # === /render ===
    async def render(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("üì∏ –ü—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é.")
        return States.WAIT_RENDER_IMAGE

    async def handle_image(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        message = update.message
        if not message.photo:
            await message.reply_text("‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–∏—à–ª–∏ –µ—â—ë —Ä–∞–∑.")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π 8-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä
        img_num = f"{random.randint(10000000, 99999999)}"
        user_id = update.effective_user.id
        caption = message.caption or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
        # –ß–∏—Å—Ç–∏–º caption —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–≥–∞
        clean_caption = re.sub(r'[\\/:*?"<>|]', '', caption)

        # 1) –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä (–∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ order_num –¥–ª—è img_num)
        prompts_log_path = os.path.join(self.logs_dir, "prompts_log.jsonl")
        order_num = 1
        if os.path.exists(prompts_log_path):
            with open(prompts_log_path, "r", encoding="utf-8") as f:
                for line in f:
                    try:
                        entry = json.loads(line)
                        if entry.get("input_image", "").startswith(img_num):
                            num = entry["input_image"].split(
                                "_")[-1].split(".")[0]
                            if num.isdigit():
                                order_num = max(order_num, int(num) + 1)
                    except Exception:
                        continue
        order_num_str = f"{order_num:02d}"

        # 2) –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª —Ñ–æ—Ç–æ –≤ input_images
        input_filename = f"{img_num}_{order_num_str}.jpg"
        input_path = os.path.join(self.input_dir, input_filename)

        await message.reply_text("üì• –°–∫–∞—á–∏–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        try:
            
            file = await context.bot.get_file(message.photo[-1].file_id)
            await file.download_to_drive(input_path)

            # 3) –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –≤ output_images —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º img_num –∏ order_num
            output_filename = f"{img_num}_{order_num_str}.jpg"
            output_path = os.path.join(self.output_dir, output_filename)
            shutil.copy(input_path, output_path)

            # 4) –ö–æ–¥–∏—Ä—É–µ–º –≤ base64 –∏–∑ output_images
            with open(output_path, "rb") as img_file:
                base64_img = base64.b64encode(img_file.read()).decode("utf-8")

            await message.reply_text("ü§ñ GPT-4o –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º—Ç...")

            # GPT —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç
            system_prompt = (
                "–¢—ã –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ –∏ –ø–æ–¥–ø–∏—Å—å. "
                "–°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–æ–º—Ç –¥–ª—è DALL¬∑E 3: —Å–æ—Ö—Ä–∞–Ω–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é, —Å—Ç–∏–ª—å –∏ —Ä–µ–∞–ª–∏–∑–º. "
                "–ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã—Ö –¥–µ—Ç–∞–ª–µ–π."
            )

            response = openai.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": [
                        {"type": "text", "text": f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {caption}"},
                        {"type": "image_url", "image_url": {
                            "url": f"data:image/jpeg;base64,{base64_img}"}}
                    ]}
                ],
                max_tokens=300
            )

            final_prompt = response.choices[0].message.content.strip()

            # 5) –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ø—Ä–æ–º—Ç–∞ –≤ output_images
            prompt_filename = f"{img_num}_{order_num_str}_prompt.txt"
            prompt_path = os.path.join(self.output_dir, prompt_filename)
            with open(prompt_path, "w", encoding="utf-8") as f:
                f.write(final_prompt)

            # 6) –õ–æ–≥–∏—Ä—É–µ–º –≤ prompts_log.jsonl –ø–æ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
            log_id = f"{img_num}_{order_num_str}"
            prompt_data = {
                "log_id": log_id,
                "timestamp": datetime.now().isoformat(),
                "username": update.effective_user.username,
                "user_id": user_id,
                "input_image": os.path.join(self.input_dir, input_filename).replace("\\", "/"),
                "prompt": final_prompt,
                "caption": clean_caption,
                "output_image": os.path.join(self.output_dir, output_filename).replace("\\", "/")
            }
            with open(prompts_log_path, "a", encoding="utf-8") as f:
                f.write(json.dumps(prompt_data, ensure_ascii=False) + "\n")

            self.logger.info(f"GPT-4o –ø—Ä–æ–º—Ç: {final_prompt}")
            await message.reply_text(f"‚úÖ GPT-4o –ø—Ä–æ–º—Ç:\n{final_prompt}")

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∏–¥–±–µ–∫
            await message.reply_text("‚úèÔ∏è –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –Ω–∞–ø–∏—à–∏ –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ.")
            return States.WAIT_FEEDBACK

        except Exception as e:
            await message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            self.logger.error(f"–û—à–∏–±–∫–∞ handle_image: {e}")
            return ConversationHandler.END

    def read_logs(self, log_type="prompts"):
        """
        –ß–∏—Ç–∞–µ—Ç –∏ –∫—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç JSON-–ª–æ–≥–∏ –∏–∑ logs/prompts_log.jsonl –∏–ª–∏ logs/feedbacks_log.jsonl
        log_type: "prompts" –∏–ª–∏ "feedbacks"
        """
        log_file = os.path.join(self.logs_dir, f"{log_type}_log.jsonl")
        if not os.path.exists(log_file):
            print(f"–§–∞–π–ª {log_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        with open(log_file, "r", encoding="utf-8") as f:
            for line in f:
                try:
                    obj = json.loads(line)
                    print(json.dumps(obj, ensure_ascii=False, indent=2))
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏: {e}")

    async def handle_feedback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        feedback = update.message.text
        self.logger.info(f"–û—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {feedback}")
        await update.message.reply_text("üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")

        feedback_data = {
            "timestamp": datetime.now().isoformat(),
            "username": update.effective_user.username,
            "user_id": update.effective_user.id,
            "feedback": feedback
        }
        feedbacks_log_path = os.path.join(self.logs_dir, "feedbacks_log.jsonl")
        with open(feedbacks_log_path, "a", encoding="utf-8") as f:
            f.write(json.dumps(feedback_data, ensure_ascii=False) + "\n")

        return ConversationHandler.END

    def run(self):
        self.logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        self.app.run_polling()


# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == '__main__':
    bot = ChatGPTTelegramBot(TELEGRAM_BOT_TOKEN)
    bot.run()
