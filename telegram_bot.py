# import logging
# import base64
# import os
# import json
# from datetime import datetime
# import openai
# from dotenv import load_dotenv

# from telegram import Update
# from telegram.ext import (
#     Application, ApplicationBuilder, CommandHandler,
#     MessageHandler, ContextTypes, ConversationHandler, filters
# )

# # === üîë –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env ===
# load_dotenv()
# OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
# TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
# openai.api_key = OPENAI_API_KEY

# # –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —Å—Ç–∞–¥–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /render
# RENDER_WAIT_IMAGE = 1


# # === ü§ñ –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram-–±–æ—Ç–∞ ===
# class ChatGPTTelegramBot:
#     def __init__(self, token: str):
#         self.token = token

#         # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
#         self.app: Application = ApplicationBuilder().token(self.token).build()

#         # –ï—Å–ª–∏ –ª–æ–≥ —É–∂–µ –µ—Å—Ç—å ‚Äî –æ—á–∏—â–∞–µ–º
#         if os.path.exists("app.log"):
#             open("app.log", "w").close()

#         # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
#         logging.basicConfig(
#             level=logging.INFO,
#             format="%(asctime)s - %(levelname)s - %(message)s",
#             handlers=[
#                 logging.FileHandler("app.log"),
#                 logging.StreamHandler()
#             ]
#         )
#         self.logger = logging.getLogger(__name__)

#         # === –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã ===
#         conv_handler = ConversationHandler(
#             entry_points=[CommandHandler("render", self.render)],
#             states={
#                 RENDER_WAIT_IMAGE: [
#                     MessageHandler(filters.PHOTO & filters.Caption(), self.handle_image)
#                 ]
#             },
#             fallbacks=[CommandHandler("cancel", self.cancel)],
#         )

#         self.app.add_handler(CommandHandler("start", self.start))
#         self.app.add_handler(CommandHandler("buy", self.buy))
#         self.app.add_handler(conv_handler)

#     # === /start ===
#     async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
#         await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /render")

#     # === /cancel ===
#     async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
#         await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –ú–æ–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ /render.")
#         return ConversationHandler.END

#     # === /buy ===
#     async def buy(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
#         await update.message.reply_text("üõí –ü–æ–∫—É–ø–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–±–∞–≤–∏–º –æ–ø–ª–∞—Ç—É –∏ –ø–æ–¥–ø–∏—Å–∫—É!")

#     # === /render ===
#     async def render(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
#         await update.message.reply_text("üì∏ –ü—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —É–ª—É—á—à–∏—Ç—å.")
#         return RENDER_WAIT_IMAGE

#     # === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===
#     async def handle_image(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
#         message = update.message

#         # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ ‚Äî –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
#         if not message.photo:
#             await message.reply_text("‚ö†Ô∏è –ü—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –ø–æ—Å–ª–µ /render")
#             return

#         # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏ —Ñ–æ—Ç–æ
#         caption = message.caption or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
#         photo = message.photo[-1]  # —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
#         photo_path = "input.jpg"

#         await message.reply_text("üì• –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

#         try:
#             # === –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ ===
#             file = await context.bot.get_file(photo.file_id)
#             await file.download_to_drive(photo_path)

#             # === –ö–æ–¥–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –≤ base64 ===
#             with open(photo_path, "rb") as img_file:
#                 base64_img = base64.b64encode(img_file.read()).decode("utf-8")

#             await message.reply_text("üëÅÔ∏è GPT-4o –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

#             # === –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è GPT-4o ===
#             system_prompt = (
#                 "–¢—ã –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã –∏ –ø–æ–¥–ø–∏—Å—å. "
#                 "–°–æ—Å—Ç–∞–≤—å –∫–æ—Ä–æ—Ç–∫–∏–π, —á—ë—Ç–∫–∏–π –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ DALL¬∑E 3, "
#                 "—Å–æ—Ö—Ä–∞–Ω–∏–≤:\n"
#                 "- –ö–æ–º–ø–æ–∑–∏—Ü–∏—é, –≥–µ–æ–º–µ—Ç—Ä–∏—é –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ü–µ–Ω—ã\n"
#                 "- –°—Ç–∏–ª—å, —Ä–∞–∫—É—Ä—Å –∏ –º–∞—Å—à—Ç–∞–±\n"
#                 "- –ù–∏–∫–∞–∫–∏—Ö –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π. –ü—Ä–æ—Å—Ç–æ —É—Å–∏–ª–∏ —Ä–µ–∞–ª–∏–∑–º.\n"
#                 "–ü—Ä–æ–º—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º, –∫–∞–∫ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä-–¥–≤–∏–∂–∫–∞."
#             )

#             # === –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ GPT-4o ===
#             response = openai.chat.completions.create(
#                 model="gpt-4o",
#                 messages=[
#                     {"role": "system", "content": system_prompt},
#                     {"role": "user", "content": [
#                         {"type": "text", "text": f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {caption}"},
#                         {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{base64_img}"}}
#                     ]}
#                 ],
#                 max_tokens=300
#             )

#             # === –†–µ–∑—É–ª—å—Ç–∞—Ç GPT-4o ===
#             final_prompt = response.choices[0].message.content.strip()

#             # === –õ–æ–≥–∏—Ä—É–µ–º –≤ prompts_log.jsonl ===
#             prompt_data = {
#                 "timestamp": datetime.now().isoformat(),
#                 "username": update.effective_user.username,
#                 "user_id": update.effective_user.id,
#                 "caption": caption,
#                 "prompt": final_prompt
#             }

#             with open("prompts_log.jsonl", "a", encoding="utf-8") as f:
#                 f.write(json.dumps(prompt_data, ensure_ascii=False) + "\n")

#             self.logger.info(f"GPT-4o –ø—Ä–æ–º—Ç:\n{final_prompt}")
#             await message.reply_text(f"üìÑ GPT-4o —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º—Ç:\n{final_prompt}")

#             # === –¢–í–û–ô –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–ù–´–ô –ë–õ–û–ö ===
#             # await message.reply_text("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ DALL¬∑E 3 —Å —É—á—ë—Ç–æ–º —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞...")

#             # try:
#             #     dalle_response = openai.images.generate(
#             #         model="dall-e-3",
#             #         prompt=final_prompt,
#             #         size="1024x1024",
#             #         quality="standard",
#             #         n=1,
#             #         response_format="url",
#             #         # image={"image": base64_img}  # –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± reference –µ—Å–ª–∏ –µ—Å—Ç—å API
#             #     )

#             #     image_url = dalle_response.data[0].url
#             #     await message.reply_photo(photo=image_url, caption="üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ DALL¬∑E 3")
#             #     self.logger.info(f"DALL¬∑E 3 image URL: {image_url}")

#             # except Exception as e:
#             #     await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ DALL¬∑E 3: {e}")
#             #     self.logger.error(f"DALL¬∑E error: {e}")

#         except Exception as e:
#             await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ GPT-4o: {e}")
#             self.logger.error(f"GPT-4o error: {e}")
#             return

#     # === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
#     def run(self):
#         self.logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
#         self.app.run_polling()


# # === üéØ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
# if __name__ == '__main__':
#     bot = ChatGPTTelegramBot(TELEGRAM_BOT_TOKEN)
#     bot.run()
